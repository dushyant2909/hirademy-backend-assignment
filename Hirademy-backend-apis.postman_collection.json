{
	"info": {
		"_postman_id": "1c30cccb-da42-4925-9e98-33ee02f02ec3",
		"name": "Hirademy-backend-apis",
		"description": "This collection provides a set of API endpoints to manage assistant records. The available endpoints allow you to create, retrieve, update, and delete assistant records in the database. Below are the details of each endpoint included in this collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28111520"
	},
	"item": [
		{
			"name": "Create assistant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - success, message, and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Success field is a boolean, message is a string, and id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Success</th>\r",
							"        <th>Message</th>\r",
							"        <th>ID</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.success}}</td>\r",
							"        <td>{{response.message}}</td>\r",
							"        <td>{{response.id}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return { response: pm.response.json() }\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"dushyantb2003@gmail.com\",\r\n    \"name\": \"Dushyant Bhutiyani\",\r\n    \"mobile\": \"8103599894\",\r\n    \"salary\": 7800000,\r\n    \"city\": \"Gwalior\",\r\n    \"country\": \"India\",\r\n    \"department\": \"Software Engineering\",\r\n    \"role\": \"Backend Developer\",\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/assistant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"assistant"
					]
				},
				"description": "### Add Assistant\n\nThis endpoint is used to add a new assistant to the system.\n\n#### Request Body\n\n- `email` (string, required): The email of the assistant.\n    \n- `name` (string, required): The name of the assistant.\n    \n- `mobile` (string, required): The mobile number of the assistant.\n    \n- `salary` (number, required): The salary of the assistant.\n    \n- `city` (string, required): The city where the assistant is located.\n    \n- `country` (string, required): The country where the assistant is located.\n    \n- `department` (string, required): The department to which the assistant belongs.\n    \n- `role` (string, required): The role of the assistant.\n    \n- `password` (string, required): The password for the assistant's account.\n    \n\n#### Response\n\nThe response will contain the status of the request, along with any relevant message or data."
			},
			"response": []
		},
		{
			"name": "Get Assistant details",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/assistant/6665b3189225ddf254d36f93",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"assistant",
						"6665b3189225ddf254d36f93"
					]
				},
				"description": "\nThe API endpoint makes an HTTP GET request to retrieve information about an assistant with a specific ID. The response is in JSON format and has the following schema:\n\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"_id\": {\n                    \"type\": \"string\"\n                },\n                \"email\": {\n                    \"type\": \"string\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"mobile\": {\n                    \"type\": \"string\"\n                },\n                \"salary\": {\n                    \"type\": \"number\"\n                },\n                \"city\": {\n                    \"type\": \"string\"\n                },\n                \"country\": {\n                    \"type\": \"string\"\n                },\n                \"department\": {\n                    \"type\": \"string\"\n                },\n                \"role\": {\n                    \"type\": \"string\"\n                },\n                \"password\": {\n                    \"type\": \"string\"\n                },\n                \"thumbnail\": {\n                    \"type\": \"string\"\n                },\n                \"createdAt\": {\n                    \"type\": \"string\"\n                },\n                \"updatedAt\": {\n                    \"type\": \"string\"\n                },\n                \"__v\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\"_id\", \"email\", \"name\", \"mobile\", \"salary\", \"city\", \"country\", \"department\", \"role\", \"password\", \"thumbnail\", \"createdAt\", \"updatedAt\", \"__v\"]\n        }\n    },\n    \"required\": [\"success\", \"message\", \"data\"]\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "Delete assistant",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/assistant/66647e41f0586073939c4fe9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"assistant",
						"66647e41f0586073939c4fe9"
					]
				},
				"description": "### Delete Assistant\n\nThis endpoint is used to delete an assistant with a specific ID.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `http://localhost:3000/api/v1/assistant/66647e41f0586073939c4fe9`\n    \n\n#### Response\n\nThe response is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response contains a `success` boolean field indicating the success of the operation, and a `message` string field which may contain additional information."
			},
			"response": []
		},
		{
			"name": "Update assistant",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Dushyant\",\r\n    \"city\":\"New Delhi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/assistant/6665b3189225ddf254d36f93",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"assistant",
						"6665b3189225ddf254d36f93"
					]
				},
				"description": "\nThis endpoint allows updating an assistant with the specified ID. The request should be sent as an HTTP PUT to the provided URL.\n\n### Request Body\n- **name** (string, optional): The name of the assistant.\n- **city** (string, optional): The city where the assistant is located.\n\n### Response\nThe response will be in JSON format with the following schema:\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n"
			},
			"response": []
		}
	]
}